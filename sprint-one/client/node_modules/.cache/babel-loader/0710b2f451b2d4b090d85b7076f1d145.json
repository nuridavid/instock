{"ast":null,"code":"var _jsxFileName = \"/Users/parhamsaniei/Downloads/MIA-C41-LEO-main 2/sprint-one/client/src/pages/InventoryModify/InventoryModify.jsx\",\n    _s = $RefreshSig$();\n\nimport './InventoryModify.sass';\nimport EditAddInventory from '../../components/EditAddInventory/EditAddInventory';\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport isEmpty from '../../helpers/isEmpty';\nimport { axiosPut, axiosPost, axiosGetInventory } from '../../helpers/axiosCalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction InventoryModify(props) {\n  _s();\n\n  const location = useLocation();\n  const {\n    id\n  } = useParams();\n  const add = {\n    title: 'Add New Inventory Item',\n    button: '+ Add item',\n    handleSubmit: e => {\n      e.preventDefault();\n      setErrorMessage(null);\n      const formData = new FormData(e.target);\n      const formDataObj = Object.fromEntries(formData);\n\n      if (isEmpty(formDataObj)) {\n        setErrorMessage({\n          message: 'This field is required'\n        });\n      } else {\n        axiosPost(`/api/inventory/`, formDataObj);\n        setTimeout(() => {\n          props.history.push('/inventory');\n        }, 1000);\n      }\n    }\n  };\n  const edit = {\n    title: 'Edit Inventory Item',\n    button: 'save',\n    handleSubmit: e => {\n      e.preventDefault();\n      setErrorMessage(null);\n      const formData = new FormData(e.target);\n      let formDataObj = Object.fromEntries(formData);\n      formDataObj.warehouseID = id;\n\n      if (isEmpty(formDataObj)) {\n        setErrorMessage({\n          message: 'This field is required'\n        });\n      } else {\n        axiosPut(`/api/inventory/${id}`, formDataObj);\n        setTimeout(() => {\n          props.history.push('/inventory');\n        }, 1000);\n      }\n    }\n  };\n\n  const handleChange = e => {\n    setStock(e.target.value);\n  };\n\n  const handleClick = () => {\n    props.history.push('/');\n  }; // States\n\n\n  const [formInfo, setFormInfo] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [warehouse, setWarehouse] = useState(null);\n  const [stock, setStock] = useState(false);\n  const [inventoryItem, setInventoryItem] = useState(null);\n  useEffect(() => {\n    axiosGetInventory(`/api/warehouses/list/all`, setWarehouse);\n    axiosGetInventory(`/api/inventory/${id}`, setInventoryItem);\n\n    if (location.pathname === '/inventory/modify/add') {\n      setFormInfo(add);\n    } else {\n      setFormInfo(edit);\n    }\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: formInfo ? /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"position\",\n      children: /*#__PURE__*/_jsxDEV(EditAddInventory, {\n        formInfo: formInfo,\n        errorMessage: errorMessage,\n        handleChange: handleChange,\n        stock: stock,\n        warehouse: warehouse,\n        handleClick: handleClick,\n        inventoryItem: inventoryItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this) : ''\n  }, void 0, false);\n}\n\n_s(InventoryModify, \"18W0tck2+Teg2uQChGq0qOfzJ/Q=\", false, function () {\n  return [useLocation, useParams];\n});\n\n_c = InventoryModify;\nexport default InventoryModify;\n\nvar _c;\n\n$RefreshReg$(_c, \"InventoryModify\");","map":{"version":3,"sources":["/Users/parhamsaniei/Downloads/MIA-C41-LEO-main 2/sprint-one/client/src/pages/InventoryModify/InventoryModify.jsx"],"names":["EditAddInventory","React","useState","useEffect","useLocation","useParams","isEmpty","axiosPut","axiosPost","axiosGetInventory","InventoryModify","props","location","id","add","title","button","handleSubmit","e","preventDefault","setErrorMessage","formData","FormData","target","formDataObj","Object","fromEntries","message","setTimeout","history","push","edit","warehouseID","handleChange","setStock","value","handleClick","formInfo","setFormInfo","errorMessage","warehouse","setWarehouse","stock","inventoryItem","setInventoryItem","pathname"],"mappings":"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","sourcesContent":["import './InventoryModify.sass';\nimport EditAddInventory from '../../components/EditAddInventory/EditAddInventory';\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport isEmpty from '../../helpers/isEmpty';\nimport {\n  axiosPut,\n  axiosPost,\n  axiosGetInventory\n} from '../../helpers/axiosCalls';\n\nfunction InventoryModify(props) {\n  const location = useLocation();\n  const { id } = useParams();\n\n  const add = {\n    title: 'Add New Inventory Item',\n    button: '+ Add item',\n    handleSubmit: (e) => {\n      e.preventDefault();\n      setErrorMessage(null);\n      const formData = new FormData(e.target);\n      const formDataObj = Object.fromEntries(formData);\n      if (isEmpty(formDataObj)) {\n        setErrorMessage({ message: 'This field is required' });\n      } else {\n        axiosPost(`/api/inventory/`, formDataObj);\n        setTimeout(() => {\n          props.history.push('/inventory');\n        }, 1000);\n      }\n    }\n  };\n\n  const edit = {\n    title: 'Edit Inventory Item',\n    button: 'save',\n    handleSubmit: (e) => {\n      e.preventDefault();\n      setErrorMessage(null);\n      const formData = new FormData(e.target);\n      let formDataObj = Object.fromEntries(formData);\n      formDataObj.warehouseID = id;\n      if (isEmpty(formDataObj)) {\n        setErrorMessage({ message: 'This field is required' });\n      } else {\n        axiosPut(`/api/inventory/${id}`, formDataObj);\n        setTimeout(() => {\n          props.history.push('/inventory');\n        }, 1000);\n      }\n    }\n  };\n\n  const handleChange = (e) => {\n    setStock(e.target.value);\n  };\n\n  const handleClick = () => {\n    props.history.push('/');\n  };\n\n  // States\n  const [formInfo, setFormInfo] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [warehouse, setWarehouse] = useState(null);\n  const [stock, setStock] = useState(false);\n  const [inventoryItem, setInventoryItem] = useState(null);\n\n  useEffect(() => {\n    axiosGetInventory(`/api/warehouses/list/all`, setWarehouse);\n    axiosGetInventory(`/api/inventory/${id}`, setInventoryItem);\n\n    if (location.pathname === '/inventory/modify/add') {\n      setFormInfo(add);\n    } else {\n      setFormInfo(edit);\n    }\n  }, [location]);\n\n  return (\n    <>\n      {formInfo ? (\n        <section className=\"position\">\n          <EditAddInventory\n            formInfo={formInfo}\n            errorMessage={errorMessage}\n            handleChange={handleChange}\n            stock={stock}\n            warehouse={warehouse}\n            handleClick={handleClick}\n            inventoryItem={inventoryItem}\n          />\n        </section>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default InventoryModify;\n"]},"metadata":{},"sourceType":"module"}